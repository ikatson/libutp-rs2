/* automatically generated by rust-bindgen 0.71.1 */

pub const UTP_IOV_MAX: u32 = 1024;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type sa_family_t = __uint8_t;
pub type socklen_t = u32;
pub type byte = ::core::ffi::c_uchar;
pub type uint16 = ::core::ffi::c_ushort;
pub type uint32 = ::core::ffi::c_uint;
pub type uint64 = ::core::ffi::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UTPSocket {
    _unused: [u8; 0],
}
pub type utp_socket = UTPSocket;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_utp_context {
    _unused: [u8; 0],
}
pub type utp_context = struct_utp_context;
pub const UTP_UDP_DONTFRAG: _bindgen_ty_1 = 2;
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
pub const UTP_STATE_CONNECT: _bindgen_ty_2 = 1;
pub const UTP_STATE_WRITABLE: _bindgen_ty_2 = 2;
pub const UTP_STATE_EOF: _bindgen_ty_2 = 3;
pub const UTP_STATE_DESTROYING: _bindgen_ty_2 = 4;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
unsafe extern "C" {
    pub static mut utp_state_names: [*const ::core::ffi::c_char; 0usize];
}
pub const UTP_ECONNREFUSED: _bindgen_ty_3 = 0;
pub const UTP_ECONNRESET: _bindgen_ty_3 = 1;
pub const UTP_ETIMEDOUT: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = ::core::ffi::c_uint;
unsafe extern "C" {
    pub static mut utp_error_code_names: [*const ::core::ffi::c_char; 0usize];
}
pub const UTP_ON_FIREWALL: _bindgen_ty_4 = 0;
pub const UTP_ON_ACCEPT: _bindgen_ty_4 = 1;
pub const UTP_ON_CONNECT: _bindgen_ty_4 = 2;
pub const UTP_ON_ERROR: _bindgen_ty_4 = 3;
pub const UTP_ON_READ: _bindgen_ty_4 = 4;
pub const UTP_ON_OVERHEAD_STATISTICS: _bindgen_ty_4 = 5;
pub const UTP_ON_STATE_CHANGE: _bindgen_ty_4 = 6;
pub const UTP_GET_READ_BUFFER_SIZE: _bindgen_ty_4 = 7;
pub const UTP_ON_DELAY_SAMPLE: _bindgen_ty_4 = 8;
pub const UTP_GET_UDP_MTU: _bindgen_ty_4 = 9;
pub const UTP_GET_UDP_OVERHEAD: _bindgen_ty_4 = 10;
pub const UTP_GET_MILLISECONDS: _bindgen_ty_4 = 11;
pub const UTP_GET_MICROSECONDS: _bindgen_ty_4 = 12;
pub const UTP_GET_RANDOM: _bindgen_ty_4 = 13;
pub const UTP_LOG: _bindgen_ty_4 = 14;
pub const UTP_SENDTO: _bindgen_ty_4 = 15;
pub const UTP_LOG_NORMAL: _bindgen_ty_4 = 16;
pub const UTP_LOG_MTU: _bindgen_ty_4 = 17;
pub const UTP_LOG_DEBUG: _bindgen_ty_4 = 18;
pub const UTP_SNDBUF: _bindgen_ty_4 = 19;
pub const UTP_RCVBUF: _bindgen_ty_4 = 20;
pub const UTP_TARGET_DELAY: _bindgen_ty_4 = 21;
pub const UTP_ARRAY_SIZE: _bindgen_ty_4 = 22;
pub type _bindgen_ty_4 = ::core::ffi::c_uint;
unsafe extern "C" {
    pub static mut utp_callback_names: [*const ::core::ffi::c_char; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct utp_callback_arguments {
    pub context: *mut utp_context,
    pub socket: *mut utp_socket,
    pub len: usize,
    pub flags: uint32,
    pub callback_type: ::core::ffi::c_int,
    pub buf: *const byte,
    pub unnamed_field1: utp_callback_arguments__bindgen_ty_1,
    pub unnamed_field2: utp_callback_arguments__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union utp_callback_arguments__bindgen_ty_1 {
    pub address: *const sockaddr,
    pub send: ::core::ffi::c_int,
    pub sample_ms: ::core::ffi::c_int,
    pub error_code: ::core::ffi::c_int,
    pub state: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of utp_callback_arguments__bindgen_ty_1"]
        [::core::mem::size_of::<utp_callback_arguments__bindgen_ty_1>() - 8usize];
    ["Alignment of utp_callback_arguments__bindgen_ty_1"]
        [::core::mem::align_of::<utp_callback_arguments__bindgen_ty_1>() - 8usize];
    ["Offset of field: utp_callback_arguments__bindgen_ty_1::address"]
        [::core::mem::offset_of!(utp_callback_arguments__bindgen_ty_1, address) - 0usize];
    ["Offset of field: utp_callback_arguments__bindgen_ty_1::send"]
        [::core::mem::offset_of!(utp_callback_arguments__bindgen_ty_1, send) - 0usize];
    ["Offset of field: utp_callback_arguments__bindgen_ty_1::sample_ms"]
        [::core::mem::offset_of!(utp_callback_arguments__bindgen_ty_1, sample_ms) - 0usize];
    ["Offset of field: utp_callback_arguments__bindgen_ty_1::error_code"]
        [::core::mem::offset_of!(utp_callback_arguments__bindgen_ty_1, error_code) - 0usize];
    ["Offset of field: utp_callback_arguments__bindgen_ty_1::state"]
        [::core::mem::offset_of!(utp_callback_arguments__bindgen_ty_1, state) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union utp_callback_arguments__bindgen_ty_2 {
    pub address_len: socklen_t,
    pub type_: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of utp_callback_arguments__bindgen_ty_2"]
        [::core::mem::size_of::<utp_callback_arguments__bindgen_ty_2>() - 4usize];
    ["Alignment of utp_callback_arguments__bindgen_ty_2"]
        [::core::mem::align_of::<utp_callback_arguments__bindgen_ty_2>() - 4usize];
    ["Offset of field: utp_callback_arguments__bindgen_ty_2::address_len"]
        [::core::mem::offset_of!(utp_callback_arguments__bindgen_ty_2, address_len) - 0usize];
    ["Offset of field: utp_callback_arguments__bindgen_ty_2::type_"]
        [::core::mem::offset_of!(utp_callback_arguments__bindgen_ty_2, type_) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of utp_callback_arguments"][::core::mem::size_of::<utp_callback_arguments>() - 56usize];
    ["Alignment of utp_callback_arguments"]
        [::core::mem::align_of::<utp_callback_arguments>() - 8usize];
    ["Offset of field: utp_callback_arguments::context"]
        [::core::mem::offset_of!(utp_callback_arguments, context) - 0usize];
    ["Offset of field: utp_callback_arguments::socket"]
        [::core::mem::offset_of!(utp_callback_arguments, socket) - 8usize];
    ["Offset of field: utp_callback_arguments::len"]
        [::core::mem::offset_of!(utp_callback_arguments, len) - 16usize];
    ["Offset of field: utp_callback_arguments::flags"]
        [::core::mem::offset_of!(utp_callback_arguments, flags) - 24usize];
    ["Offset of field: utp_callback_arguments::callback_type"]
        [::core::mem::offset_of!(utp_callback_arguments, callback_type) - 28usize];
    ["Offset of field: utp_callback_arguments::buf"]
        [::core::mem::offset_of!(utp_callback_arguments, buf) - 32usize];
};
pub type utp_callback_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut utp_callback_arguments) -> uint64>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utp_context_stats {
    pub _nraw_recv: [uint32; 5usize],
    pub _nraw_send: [uint32; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of utp_context_stats"][::core::mem::size_of::<utp_context_stats>() - 40usize];
    ["Alignment of utp_context_stats"][::core::mem::align_of::<utp_context_stats>() - 4usize];
    ["Offset of field: utp_context_stats::_nraw_recv"]
        [::core::mem::offset_of!(utp_context_stats, _nraw_recv) - 0usize];
    ["Offset of field: utp_context_stats::_nraw_send"]
        [::core::mem::offset_of!(utp_context_stats, _nraw_send) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utp_socket_stats {
    pub nbytes_recv: uint64,
    pub nbytes_xmit: uint64,
    pub rexmit: uint32,
    pub fastrexmit: uint32,
    pub nxmit: uint32,
    pub nrecv: uint32,
    pub nduprecv: uint32,
    pub mtu_guess: uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of utp_socket_stats"][::core::mem::size_of::<utp_socket_stats>() - 40usize];
    ["Alignment of utp_socket_stats"][::core::mem::align_of::<utp_socket_stats>() - 8usize];
    ["Offset of field: utp_socket_stats::nbytes_recv"]
        [::core::mem::offset_of!(utp_socket_stats, nbytes_recv) - 0usize];
    ["Offset of field: utp_socket_stats::nbytes_xmit"]
        [::core::mem::offset_of!(utp_socket_stats, nbytes_xmit) - 8usize];
    ["Offset of field: utp_socket_stats::rexmit"]
        [::core::mem::offset_of!(utp_socket_stats, rexmit) - 16usize];
    ["Offset of field: utp_socket_stats::fastrexmit"]
        [::core::mem::offset_of!(utp_socket_stats, fastrexmit) - 20usize];
    ["Offset of field: utp_socket_stats::nxmit"]
        [::core::mem::offset_of!(utp_socket_stats, nxmit) - 24usize];
    ["Offset of field: utp_socket_stats::nrecv"]
        [::core::mem::offset_of!(utp_socket_stats, nrecv) - 28usize];
    ["Offset of field: utp_socket_stats::nduprecv"]
        [::core::mem::offset_of!(utp_socket_stats, nduprecv) - 32usize];
    ["Offset of field: utp_socket_stats::mtu_guess"]
        [::core::mem::offset_of!(utp_socket_stats, mtu_guess) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utp_iovec {
    pub iov_base: *mut ::core::ffi::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of utp_iovec"][::core::mem::size_of::<utp_iovec>() - 16usize];
    ["Alignment of utp_iovec"][::core::mem::align_of::<utp_iovec>() - 8usize];
    ["Offset of field: utp_iovec::iov_base"][::core::mem::offset_of!(utp_iovec, iov_base) - 0usize];
    ["Offset of field: utp_iovec::iov_len"][::core::mem::offset_of!(utp_iovec, iov_len) - 8usize];
};
unsafe extern "C" {
    pub fn utp_init(version: ::core::ffi::c_int) -> *mut utp_context;
}
unsafe extern "C" {
    pub fn utp_destroy(ctx: *mut utp_context);
}
unsafe extern "C" {
    pub fn utp_set_callback(
        ctx: *mut utp_context,
        callback_name: ::core::ffi::c_int,
        proc_: utp_callback_t,
    );
}
unsafe extern "C" {
    pub fn utp_context_set_userdata(
        ctx: *mut utp_context,
        userdata: *mut ::core::ffi::c_void,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn utp_context_get_userdata(ctx: *mut utp_context) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn utp_context_set_option(
        ctx: *mut utp_context,
        opt: ::core::ffi::c_int,
        val: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn utp_context_get_option(
        ctx: *mut utp_context,
        opt: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn utp_process_udp(
        ctx: *mut utp_context,
        buf: *const byte,
        len: usize,
        to: *const sockaddr,
        tolen: socklen_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn utp_process_icmp_error(
        ctx: *mut utp_context,
        buffer: *const byte,
        len: usize,
        to: *const sockaddr,
        tolen: socklen_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn utp_process_icmp_fragmentation(
        ctx: *mut utp_context,
        buffer: *const byte,
        len: usize,
        to: *const sockaddr,
        tolen: socklen_t,
        next_hop_mtu: uint16,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn utp_check_timeouts(ctx: *mut utp_context);
}
unsafe extern "C" {
    pub fn utp_issue_deferred_acks(ctx: *mut utp_context);
}
unsafe extern "C" {
    pub fn utp_get_context_stats(ctx: *mut utp_context) -> *mut utp_context_stats;
}
unsafe extern "C" {
    pub fn utp_create_socket(ctx: *mut utp_context) -> *mut utp_socket;
}
unsafe extern "C" {
    pub fn utp_set_userdata(
        s: *mut utp_socket,
        userdata: *mut ::core::ffi::c_void,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn utp_get_userdata(s: *mut utp_socket) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn utp_setsockopt(
        s: *mut utp_socket,
        opt: ::core::ffi::c_int,
        val: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn utp_getsockopt(s: *mut utp_socket, opt: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn utp_connect(
        s: *mut utp_socket,
        to: *const sockaddr,
        tolen: socklen_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn utp_write(s: *mut utp_socket, buf: *mut ::core::ffi::c_void, count: usize) -> isize;
}
unsafe extern "C" {
    pub fn utp_writev(s: *mut utp_socket, iovec: *mut utp_iovec, num_iovecs: usize) -> isize;
}
unsafe extern "C" {
    pub fn utp_getpeername(
        s: *mut utp_socket,
        addr: *mut sockaddr,
        addrlen: *mut socklen_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn utp_read_drained(s: *mut utp_socket);
}
unsafe extern "C" {
    pub fn utp_get_delays(
        s: *mut utp_socket,
        ours: *mut uint32,
        theirs: *mut uint32,
        age: *mut uint32,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn utp_get_stats(s: *mut utp_socket) -> *mut utp_socket_stats;
}
unsafe extern "C" {
    pub fn utp_get_context(s: *mut utp_socket) -> *mut utp_context;
}
unsafe extern "C" {
    pub fn utp_shutdown(s: *mut utp_socket, how: ::core::ffi::c_int);
}
unsafe extern "C" {
    pub fn utp_close(s: *mut utp_socket);
}
